{"name": "test_sys_login_success_01[datas0]", "status": "broken", "statusDetails": {"message": "ValueError: no option named 'env'", "trace": "self = <_pytest.config.Config object at 0x10d142cd0>, name = 'env'\ndefault = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'env'\n\n.venv/lib/python3.8/site-packages/_pytest/config/__init__.py:1698: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\npytestconfig = <_pytest.config.Config object at 0x10d142cd0>\n\n    @pytest.fixture(scope=\"session\",autouse=True)\n    def env(pytestconfig):\n>       return pytestconfig.getoption(\"env\")\nE       ValueError: no option named 'env'\n\nconftest.py:32: ValueError"}, "parameters": [{"name": "datas", "value": "{'allureInfo': {'epic': '业务运营支撑系统', 'feature': '登录', 'description': '管理后台登录功能测试', 'story': '用户登录', 'title': '账号、密码正确，登录成功'}, 'requests': [{'stepName': '1-获取图片验证码', 'url': '/service/service-basic/image/${LoginService().get_curr_timestamp()}', 'method': 'get', 'headers': '${ProcessCaseInfo().process_header()}', 'validate': [{'exist': ['${LoginService().get_redis_verifycode()}', 'exist']}, {'eq': ['$.status_code', '200']}], 'extract': None}, {'stepName': '2-使用验证码登录', 'url': '/service/service-basic/account/login', 'method': 'post', 'headers': '${ProcessCaseInfo().process_header()}', 'json': {'account': '${LoginService().get_account()}', 'batchNo': '${FileReadUtil(extract.yaml).read_yaml_key(batchNo)}', 'code': '${FileReadUtil(extract.yaml).read_yaml_key(code)}', 'passwd': '${LoginService().get_password()}'}, 'validate': [{'eq': ['$.status_code', '200']}, {'exist': ['$.text.data.token', 'exist']}, {'eq': ['$.text.code', '0']}], 'extract': [{'token': '$.text.data.token'}]}]}"}], "start": 1721100455654, "stop": 1721100455654, "uuid": "a6083f7f-da32-42a6-b904-4e07d6478321", "historyId": "39ec4e445ca762073dfcf1a9e9a7cae7", "testCaseId": "fbd6fb240e8bcd37ce32c08b2e02789b", "fullName": "testcase.login.test_sys_login.TestSysLogin#test_sys_login_success_01", "labels": [{"name": "parentSuite", "value": "testcase.login"}, {"name": "suite", "value": "test_sys_login"}, {"name": "subSuite", "value": "TestSysLogin"}, {"name": "host", "value": "jijiadeMacBook-Pro.local"}, {"name": "thread", "value": "42440-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.login.test_sys_login"}]}